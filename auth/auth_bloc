import 'package:bloc/bloc.dart';
import 'package:bloc/data/sharedpref/preferences.dart';
import 'package:bloc/data/sharedpref/shared_preference_helper.dart';
import 'auth_event.dart';
import 'auth_state.dart';

class AuthenticationBloc extends Bloc<AuthenticationEvent, AuthenticationState> {
  final SharedPreferenceHelper sharedPreference;
  AuthenticationBloc(this.sharedPreference) : super(AuthenticationUninitialized());

  @override
  Stream<AuthenticationState> mapEventToState(
      AuthenticationEvent event,
      ) async* {
    if(event is AppStarted){
      if(await sharedPreference.hasToken){
        if(await sharedPreference.getToken==Preferences.logOutToken){
          yield AuthenticationLoggedOut();
        }
        else{
          yield AuthenticationLoggedIn();
        }
      }
      else{
        yield AuthenticationUnauthenticated();
      }
    }
    else if(event is LoggedIn){
      yield AuthenticationLoading();
      await sharedPreference.persistToken(event.token);
      await sharedPreference.setUserName(event.name);
      await sharedPreference.setUserPassword(event.password);
      yield AuthenticationAuthenticated();
      yield AuthenticationLoggedIn();
    }

    else if(event is LoggedOut){
      yield AuthenticationLoading();
      await sharedPreference.setLogOutToken();
      yield AuthenticationLoggedOut();
    }
    else if (event is SignedUp){
      yield AuthenticationLoading();
      await sharedPreference.persistToken(event.token);
      await sharedPreference.setUserName(event.name);
      await sharedPreference.setUserPassword(event.password);
      yield AuthenticationAuthenticated();
      yield AuthenticationSignedUp();
    }
  }
}
